apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "wildduck.wildduck.fullname" . }}-configmap"
data:
  default.toml: |-
    # Uncomment if you start the app as root and want to downgrade
    # once all privileged actions are completed
    # If you do not use privileged ports then you can start the app already under required user account
    #user="wildduck"
    #group="wildduck"

    # process title
    ident="wildduck"

    # how many processes to start
    processes=1

    # default quota storage in MB (can be overriden per user)
    maxStorage=1024

    # default smtp recipients for 24h (can be overriden per user)
    maxRecipients=2000

    # default forwarded messages for 24h (can be overriden per user)
    maxForwards=2000

    # If usernames are not email addresses then use this domain as hostname part
    #emailDomain="mydomain.info"

    [dbs]
    # @include "dbs.toml"

    [totp]
        # If enabled then encrypt TOTP seed tokens with the secret password. By default TOTP seeds
        # are not encrypted and stored as cleartext. Once set up do not change these values,
        # otherwise decrypting totp seeds is going to fail
        #cipher="aes192"
        #secret="a secret cat"

    [u2f]
        # Fully qualified URL of your website (must use HTTPS!)
        appId="https://localhost:3000"

    [attachments]
    # @include "attachments.toml"

    [log]
        level="debug"

        skipFetchLog=false # if true, then does not output individual * FETCH responses to log

        # delete authentication log entries after 30 days
        # changing this value only affects new entries
        # set to false to not log authentication events
        # set to 0 to keep the logs infinitely
        authlogExpireDays=30

        [log.gelf]
            enabled=false
            hostname=false # defaults to os.hostname()
            component="wildduck"
            [log.gelf.options]
                graylogPort=12201
                graylogHostname="127.0.0.1"
                connection="lan"

    [imap]
    # @include "imap.toml"

    [tls]
    # @include "tls.toml"

    [lmtp]
    # @include "lmtp.toml"

    [pop3]
    # @include "pop3.toml"

    [api]
    # @include "api.toml"

    [sender]
    # @include "sender.toml"

    [dkim]
    # @include "dkim.toml"

    [acme]
    # @include "acme.toml"

    [plugins]
    # @include "plugins/*.toml"

    [tasks]
    # if enabled then process jobs like deleting expired messages etc
    enabled=true

    [smtp.setup]
    # Public configuration for SMTP MDA, needed for mobileconfig files
    hostname="{{ .Values.mailDomain }}"
    secure=true
    port=465

    [webhooks]
    # At least one server must have webhook processing enabled,
    # otherwise events would pile up in the Redis queue.
    enabled = true
  acme.toml: |-
    # ACME production settings
    key = "production"
    directoryUrl = "https://acme-v02.api.letsencrypt.org/directory"
    email = "{{ .Values.acmeEmail }}"

    # ACME development settings
    #key = "devel" # variable to identify account settings for specified directory url
    #directoryUrl = "https://acme-staging-v02.api.letsencrypt.org/directory"
    #email = "domainadmin@example.com" # must be valid email address

    # If hostname has a CAA record set then match it against this list
    # CAA check is done before WildDuck tries to request certificate from ACME
    caaDomains = [ "letsencrypt.org" ]

    # Private key settings, if WildDuck has to generate a key by itself
    keyBits = 2048
    keyExponent = 65537

    [autogenerate]
    # If enabled then automatically generates TLS certificates based on SNI servernames
    enabled = true

    [autogenerate.cnameMapping]
    # Sudomain CNAME mapping
    #   "abc" = ["def.com"] means that if the SNI servername domain is "abc.{domain}"
    #   then there must be a CNAME record for this domain that points to "def.com".
    #   If multiple CNAME targets are defined (eg ["def.com", "bef.com"], then at least 1 must match.
    #   Additionally, there must be at least 1 email account with "@{domain}" address.
    #   If there is no match, then TLS certificate is not generated.
 
    {{ .Values.cnameMapping }}

    # imap = ["imap.example.com"]
    # smtp = ["smtp.example.com"]
    # pop3 = ["imap.example.com"]

    [agent]
    # If enabled then starts a HTTP server that listens for ACME verification requests
    # If you have WildDuck API already listening on port 80 then you don't need this
        enabled = false
        port = 80 # use 80 in production
        redirect = "https://wildduck.email" # redirect requests unrelated to ACME updates to this URL
  api.toml: |-
    enabled=true
    port={{ .Values.wildduck.service.httpPort }}
    # by default bind to localhost only
    host="0.0.0.0"

    # Use `true` (HTTPS) for port 443 and `false` (HTTP) for 80
    secure=false

    # If set requires all API calls to have accessToken query argument with that value
    # http://localhost:8080/users?accessToken=somesecretvalue
    {{ if .Values.wildduck.auth.enabled }}
    accessToken="{{ .Values.wildduck.auth.accessToken }}"
    {{ end }}

    [accessControl]
    # If true then require a valid access token to perform API calls
    # If a client provides a token then it is validated even if using a token is not required
    enabled=false

    # Secret for HMAC
    # Changing this value invalidates all tokens
    secret="a secret cat"

    # Generated access token TTL in seconds. Token TTL gets extended by this value every time the token is used. Defaults to 14 days
    #tokenTTL=1209600

    # Generated access token max lifetime in seconds. Defaults to 180 days
    #tokenLifetime=15552000

    [roles]
    # @include "roles.json"

    [tls]
    # If certificate path is not defined, use global or built-in self-signed certs
    #key="/path/to/server/key.pem"
    #cert="/path/to/server/cert.pem"

    [mobileconfig]
    # plist configuration for OSX/iOS profile files that are generated with Application Specific Passwords
    # Use {email} in the description strings to replace it with account email address

    # A reverse-DNS style identifier (com.example.myprofile, for example) that identifies the profile.
    # This string is used to determine whether a new profile should replace an existing one or should be added. Username is prepended to this value.
    identifier="com.email.wildduck"

    # A human-readable name for the profile. This value is displayed on the Detail screen. It does not have to be unique.
    displayName="WildDuck Mail"

    # A human-readable string containing the name of the organization that provided the profile.
    organization="WildDuck Mail Services"

    # A description of the profile, shown on the Detail screen for the profile. This should be descriptive enough to help the user decide whether to install the profile.
    displayDescription="Install this profile to setup {email}"

    # A user-visible description of the email account, shown in the Mail and Settings applications.
    accountDescription="WildDuck ({email})"

    [mobileconfig.tls]
    # If certificate path is not defined, use global or built-in self-signed certs
    #key="/path/to/server/key.pem"
    #cert="/path/to/server/cert.pem"

    [cors]
    origins = ["*"]
  attachments.toml: |-
    # Attachment storage options

    # For now there's only a single option for attachment storage
    type="gridstore"
    bucket="attachments"

    # If true then decodes base64 encoded attachments to binary before storing to DB.
    # Decoding base64 attachments expects consistent line length and default base64 alphabet
    decodeBase64=true
  dbs.toml: |-
    # mongodb connection string for the main database

    {{ if .Values.wildduck.mongo.authEnabled }}
    mongo="mongodb://{{ .Values.wildduck.mongo.username }}:{{ .Values.wildduck.mongo.password }}@{{ .Values.wildduck.mongo.host }}:{{ .Values.wildduck.mongo.port }}/wildduck"
    {{ else }}
    mongo="mongodb://{{ .Values.wildduck.mongo.host }}:{{ .Values.wildduck.mongo.port }}/wildduck"
    {{ end }}

    # redis connection string to connect to a single master (see below for Sentinel example)
    redis="redis://{{ .Values.redis.username }}:{{ .Values.redis.password }}@{{ .Values.redis.host }}:{{ .Values.redis.port }}/3"

    # WildDuck allows using different kind of data in different databases
    # If you do not provide a database config value, then main database connection
    # is used for everything
    # You can either use a database name (uses shared connection) or a configutaion
    # url (creates a separate connection) for each databases

    # Optional database name or connection url for GridFS if you do not want to
    # use the main db for storing attachments. Useful if you want
    # to use a different mount folder or storage engine
    #gridfs="wildduck"

    # Optional database name or connection url for users collection if you do not want to
    # use the main db for storing user/address data. Useful if you want
    # to use a different mount folder or storage engine
    #users="wildduck"

    # Optional database name or connection url for ZoneMTA queue database. This is
    # used to push outbound emails to the sending queue
    {{ if .Values.wildduck.mongo.authEnabled }}
    sender="mongodb://{{ .Values.wildduck.mongo.usernameZoneMta }}:{{ .Values.wildduck.mongo.passwordZoneMta }}@{{ .Values.wildduck.mongo.host }}:{{ .Values.wildduck.mongo.port }}/zone-mta"
    {{ else }}
    sender="mongodb://{{ .Values.wildduck.mongo.host }}:{{ .Values.wildduck.mongo.port }}/zone-mta"
    {{ end }}

    #queued="mail"

    #[redis]
    #host="redis"
    #port=6379
    #db=3

    ## Connect to Redis Sentinel instead of single master
    # [redis]
    # name="mymaster"
    # password=""
    # db=3
    # [[redis.sentinels]]
    #   host="54.36.85.113"
    #   port=26379
    # [[redis.sentinels]]
    #   host="54.36.85.114"
    #   port=26379
    # [[redis.sentinels]]
    #   host="54.36.85.115"
    #   port=26379
  dkim.toml: |-
    # If enabled then encrypt DKIM keys with the secret password. By default DKIM keys
    # are not encrypted and stored as cleartext. Once set up do not change these values,
    # otherwise decrypting DKIM keys is going to fail

    cipher="{{ .Values.dkim.cipher}}"
    secret="{{ .Values.dkim.secret }}"

    # If true then spwans openssl command line executable for generating DKIM keys
    # Otherwise forge library is used which is cross-environment but slower
    useOpenSSL=true
    # Define path to openssl if not in default path
    #pathOpenSSL="/usr/local/bin/openssl"

    # If true then also adds a signature for the outbound domain
    # Affects WildDuck ZoneMTA plugin only
    signTransportDomain={{ .Values.dkim.enabled }}

    # do not change this
    hashAlgo="sha256"
  imap.toml: |-
    # If enabled then WildDuck exposes an IMAP interface for listing and fetching emails
    enabled=true
    port={{ if .Values.tls.enabled }}993{{ else }}143{{ end }}
    host="0.0.0.0"

    # Use `true` for port 993 and `false` for 143. If connection is not secured
    # on connection then WildDuck enables STARTTLS extension
    secure={{ .Values.tls.enabled }}
 
    # Max size for messages uploaded via APPEND
    maxMB=25

    # delete messages from \Trash and \Junk after retention days
    retention=30

    # Default max donwload bandwith per day in megabytes
    maxDownloadMB=10000

    # Default max upload bandwith per day in  megabytes
    maxUploadMB=10000

    # Default max concurrent connections per service per client
    maxConnections=15

    # if `true` then do not autodelete expired messages
    disableRetention=false

    # If true, then disables STARTTLS support
    disableSTARTTLS={{ if .Values.tls.enabled }}false{{ else }}true{{ end }}

    # If true, then advertises COMPRESS=DEFLATE capability
    enableCompression=false

    # If true, then expect HAProxy PROXY header as the first line of data
    useProxy=false
    # useProxy=true # expect PROXY from all conections
    # useProxy=['*'] # expect PROXY from all conections
    # useProxy=['1.2.3.4', '1.2.3.5'] # expect PROXY only from connections from listed IP addresses

    # an array of IP addresses to ignore (not logged)
    ignoredHosts=[]

    #name="WildDuck IMAP"
    #version="1.0.0"
    #vendor="WildDuck"

    # Add extra IMAP interfaces
    #[[interface]]
    #enabled=true
    #port=9143
    #host="0.0.0.0"
    #secure=false
    #ignoreSTARTTLS=true

    # If true then EXPUNGE is called after a message gets a \Deleted flag set
    autoExpunge=true

    [setup]
    # Public configuration for IMAP
    hostname="{{ .Values.mailDomain }}"
    {{ if .Values.tls.enabled }}
    secure=true
    # port defaults to imap.port
    port=993
    {{ end }}

    [tls]
    ## If certificate path is not defined, use global or built-in self-signed certs
    {{ if .Values.tls.enabled }}
    key="/opt/certs/tls.key"
    cert="/opt/certs/tls.crt"
    {{  end }}

    ## You can also define extra options for specific TLS settings:

    #ciphers="ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS"

    #secureProtocol="SSLv23_server_method"

    ## constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_TLSv1 => 100663296
    #secureOptions=100663296

    #[[interface]]
    #enabled=true
    #port=9143
    #host="0.0.0.0"
    #secure=false
    #ignoreSTARTTLS=false
  lmtp.toml: |-
    # If enabled then WildDuck exposes a LMTP interface for pushing messages to mail store
    # NB! If you are using WildDuck plugin for Haraka then LMTP is not needed
    enabled=false
    port=2424

    # by default bind to localhost only
    host="127.0.0.1"

    # Max accepted size for messages pushed via LMTP
    maxMB=25

    # If true then disables STARTTLS usage
    disableSTARTTLS={{ if .Values.tls.enabled }}false{{ else }}true{{ end }}

    # Greeting message for connecting client
    banner="Welcome to WildDuck Mail Server"

    # Server hostname. Defaults to os.hostname() if false
    name=false

    [tls]
    # If certificate path is not defined, use global or built-in self-signed certs for STARTTLS
    {{ if .Values.tls.enabled }}
    key="/opt/certs/tls.key"
    cert="/opt/certs/tls.crt"
    {{  end }}
  pop3.toml: |-
    # If enabled then WildDuck exposes a limited POP3 interface for listing and fetching emails
    enabled=true
    port={{ if .Values.tls.enabled }}995{{ else }}110{{ end }}
    # by default bind to localhost only
    host="0.0.0.0"

    # If true, then disables STARTTLS support
    disableSTARTTLS={{ if .Values.tls.enabled }}false{{ else }}true{{ end }}

    # Use `true` for port 995 and `false` for 110
    secure={{ .Values.tls.enabled }}

    # If true, then do not show server info in CAPA response
    disableVersionString=false

    # How many latest messages to list for LIST and UIDL
    # POP3 server never lists all messages but only a limited length list
    maxMessages=250

    # Max donwload bandwith per day in megabytes
    maxDownloadMB=10000

    # If true, then expect HAProxy PROXY header as the first line of data
    useProxy=false

    # an array of IP addresses to ignore (not logged)
    ignoredHosts=[]

    #name="WildDuck POP3"
    #version="1.0.0"

    [tls]
    # If certificate path is not defined, use global or built-in self-signed certs
    {{ if .Values.tls.enabled }}
    key="/opt/certs/tls.key"
    cert="/opt/certs/tls.crt"
    {{  end }}

    [setup]
    # Public configuration for POP3
    hostname="{{ .Values.mailDomain }}"
    {{ if .Values.tls.enabled }}
    secure=true
    # port defaults to pop3.port
    port=995
    {{ end }}
  roles.json: |-
    {
        "root": {
            "addresslisting": {
                "read:any": ["*"]
            },

            "addresses": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "authentication": {
                "create:any": ["*"],
                "read:any": ["*"]
            },

            "userlisting": {
                "read:any": ["*"]
            },

            "users": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "asps": {
                "create:any": ["*"],
                "read:any": ["*"],
                "delete:any": ["*"]
            },

            "messages": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "attachments": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "storage": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "mailboxes": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "autoreplies": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "filters": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "dkim": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "domainaccess": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "domainaliases": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "webhooks": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            }
        },

        "manager": {
            "addresslisting": {
                "read:any": ["*"]
            },

            "addresses": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "authentication": {
                "create:any": ["*"],
                "read:any": ["*"]
            },

            "userlisting": {
                "read:any": ["*"]
            },

            "users": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "asps": {
                "create:any": ["*"],
                "read:any": ["*"],
                "delete:any": ["*"]
            },

            "autoreplies": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "filters": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "dkim": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "domainaccess": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "domainaliases": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "webhooks": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            }
        },

        "webmail": {
            "addresses": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "authentication": {
                "create:any": ["*"],
                "read:any": ["*"]
            },

            "users": {
                "read:any": ["*"],
                "update:any": ["*"]
            },

            "asps": {
                "create:any": ["*"],
                "read:any": ["*"],
                "delete:any": ["*"]
            },

            "messages": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "attachments": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "storage": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "mailboxes": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "autoreplies": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "filters": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "domainaccess": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            },

            "webhooks": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            }
        },

        "user": {
            "addresslisting": {
                "read:own": ["*", "!internalData"]
            },

            "addresses": {
                "create:own": ["*", "!internalData"],
                "read:own": ["*", "!internalData"],
                "update:own": ["*", "!internalData"],
                "delete:own": ["*"]
            },

            "authentication": {
                "read:own": ["*"]
            },

            "userlisting": {
                "read:own": ["*", "!tags", "!disabledScopes", "!internalData"]
            },

            "users": {
                "read:own": ["*", "!tags", "!disabledScopes", "!internalData"],
                "update:own": ["*", "!tags", "!disabledScopes", "!internalData"]
            },

            "asps": {
                "create:own": ["*"],
                "read:own": ["*"],
                "delete:own": ["*"]
            },

            "messages": {
                "create:own": ["*"],
                "read:own": ["*"],
                "update:own": ["*"],
                "delete:own": ["*"]
            },

            "attachments": {
                "create:own": ["*"],
                "read:own": ["*"],
                "update:own": ["*"],
                "delete:own": ["*"]
            },

            "storage": {
                "create:own": ["*"],
                "read:own": ["*"],
                "update:own": ["*"],
                "delete:own": ["*"]
            },

            "mailboxes": {
                "create:own": ["*"],
                "read:own": ["*"],
                "update:own": ["*"],
                "delete:own": ["*"]
            },

            "autoreplies": {
                "create:own": ["*"],
                "read:own": ["*"],
                "update:own": ["*"],
                "delete:own": ["*"]
            },

            "filters": {
                "create:own": ["*"],
                "read:own": ["*"],
                "update:own": ["*"],
                "delete:own": ["*"]
            },

            "webhooks": {
                "read:own": ["*"]
            }
        },

        "auth": {
            "authentication": {
                "create:any": ["*", "!token"]
            }
        },

        "attachments": {
            "attachments": {
                "read:any": ["*"]
            }
        },

        "tokenAuth": {
            "authentication": {
                "create:any": ["*"]
            }
        },

        "audit": {
            "users": {
                "read:any": ["*"]
            },

            "audit": {
                "create:any": ["*"],
                "read:any": ["*"],
                "update:any": ["*"],
                "delete:any": ["*"]
            }
        }
    }
  sender.toml: |-
    # which ZoneMTA queue to use by default
    zone="default"

    # Collection name for GridFS storage
    gfs="mail"

    # Collection name for the queue
    # see [dbs].sender option for choosing correct database to use for ZoneMTA queues
    # by default the main wildduck database is used
    collection="zone-queue"

    # Hashing secret for loop detection
    # Must be shared with haraka-plugin-wildduck
    # If not set then looping is not tracked
    #loopSecret="secret value"
  test.toml: |-
    [log]
        level="error"

    [dbs]
        # mongodb connection string for the main database
        mongo="mongodb://{{ .Values.wildduck.mongo.username }}:{{ .Values.wildduck.mongo.password }}@{{ .Values.wildduck.mongo.host }}:{{ .Values.wildduck.mongo.port }}/wildduck-test"

        # redis connection string
        redis="redis://{{ .Values.redis.username }}:{{ .Values.redis.password }}@{{ .Values.redis.host }}:{{ .Values.redis.port }}/13"

        dbname="wildduck-test"

    [imap]
        autoExpunge=false
  tls.toml: |-
    # Default TLS keys (can be overriden by individual services)
    #key="/path/to/server/key.pem"
    #ca=["/path/to/server/ca1.pem", "/path/to/server/ca2.pem"]
    #cert="/path/to/server/cert.pem"
